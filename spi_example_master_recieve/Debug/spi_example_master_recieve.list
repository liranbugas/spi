
spi_example_master_recieve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000354  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e8  080004e8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e8  080004e8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080004e8  080004e8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e8  080004e8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e8  080004e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004ec  080004ec  000104ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080004f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000024  08000514  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000514  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000374  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001b2  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00020580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00020628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000107a  00000000  00000000  00020698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c99  00000000  00000000  00021712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003c96  00000000  00000000  000223ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00026041  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000150  00000000  00000000  00026094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004d0 	.word	0x080004d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080004d0 	.word	0x080004d0

080001d4 <gpio_ini>:
static uint32_t* pGpio_B_Out =(uint32_t*)(GPIO_B + GPIO_OUT);
void gpio_ini()
//Initialize the pin b3 as clock, b4 as miso, b5 as mosi, b6 as output
//alf5
//slave select pin is low when choose him
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	 *pRcc_Ahb_En |= (1<<1);
 80001d8:	4b46      	ldr	r3, [pc, #280]	; (80002f4 <gpio_ini+0x120>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	681a      	ldr	r2, [r3, #0]
 80001de:	4b45      	ldr	r3, [pc, #276]	; (80002f4 <gpio_ini+0x120>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f042 0202 	orr.w	r2, r2, #2
 80001e6:	601a      	str	r2, [r3, #0]
	 *pRcc_Apb2_En |=(1<<12);
 80001e8:	4b43      	ldr	r3, [pc, #268]	; (80002f8 <gpio_ini+0x124>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	4b42      	ldr	r3, [pc, #264]	; (80002f8 <gpio_ini+0x124>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80001f6:	601a      	str	r2, [r3, #0]
	 //to alternate function and pin 6 as output
	 *pGpioB_Cr &=0x00000000;
 80001f8:	4b40      	ldr	r3, [pc, #256]	; (80002fc <gpio_ini+0x128>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
	 *pGpioB_Cr |=(1<<7);
 8000200:	4b3e      	ldr	r3, [pc, #248]	; (80002fc <gpio_ini+0x128>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b3d      	ldr	r3, [pc, #244]	; (80002fc <gpio_ini+0x128>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800020e:	601a      	str	r2, [r3, #0]
	 *pGpioB_Cr |=(1<<9);
 8000210:	4b3a      	ldr	r3, [pc, #232]	; (80002fc <gpio_ini+0x128>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	4b39      	ldr	r3, [pc, #228]	; (80002fc <gpio_ini+0x128>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800021e:	601a      	str	r2, [r3, #0]
	 *pGpioB_Cr |=(1<<11);
 8000220:	4b36      	ldr	r3, [pc, #216]	; (80002fc <gpio_ini+0x128>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4b35      	ldr	r3, [pc, #212]	; (80002fc <gpio_ini+0x128>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800022e:	601a      	str	r2, [r3, #0]
	 *pGpioB_Cr |=(1<<12);
 8000230:	4b32      	ldr	r3, [pc, #200]	; (80002fc <gpio_ini+0x128>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b31      	ldr	r3, [pc, #196]	; (80002fc <gpio_ini+0x128>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800023e:	601a      	str	r2, [r3, #0]
	 //open drain
	 *pGpio_B_Outype|=(0x3<<3);
 8000240:	4b2f      	ldr	r3, [pc, #188]	; (8000300 <gpio_ini+0x12c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	4b2e      	ldr	r3, [pc, #184]	; (8000300 <gpio_ini+0x12c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f042 0218 	orr.w	r2, r2, #24
 800024e:	601a      	str	r2, [r3, #0]
	 *pGpio_B_Outype|=(1<<5);
 8000250:	4b2b      	ldr	r3, [pc, #172]	; (8000300 <gpio_ini+0x12c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b2a      	ldr	r3, [pc, #168]	; (8000300 <gpio_ini+0x12c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f042 0220 	orr.w	r2, r2, #32
 800025e:	601a      	str	r2, [r3, #0]
	 *pGpio_B_Outype|=(1<<6);
 8000260:	4b27      	ldr	r3, [pc, #156]	; (8000300 <gpio_ini+0x12c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	4b26      	ldr	r3, [pc, #152]	; (8000300 <gpio_ini+0x12c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800026e:	601a      	str	r2, [r3, #0]
	 //pull up
	 *pGpio_B_Pull_UpDown&=0x00000000;
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <gpio_ini+0x130>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
	 *pGpio_B_Pull_UpDown|=(1<<7);
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <gpio_ini+0x130>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b21      	ldr	r3, [pc, #132]	; (8000304 <gpio_ini+0x130>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000286:	601a      	str	r2, [r3, #0]
	 *pGpio_B_Pull_UpDown|=(1<<9);
 8000288:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <gpio_ini+0x130>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	4b1d      	ldr	r3, [pc, #116]	; (8000304 <gpio_ini+0x130>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000296:	601a      	str	r2, [r3, #0]
	 *pGpio_B_Pull_UpDown|=(1<<11);
 8000298:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <gpio_ini+0x130>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	4b19      	ldr	r3, [pc, #100]	; (8000304 <gpio_ini+0x130>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80002a6:	601a      	str	r2, [r3, #0]
	 *pGpio_B_Pull_UpDown|=(1<<13);
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <gpio_ini+0x130>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <gpio_ini+0x130>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80002b6:	601a      	str	r2, [r3, #0]
	 //alternate function state 5 for spi
	 *pGpio_B_Altf_L|=(5<<12);
 80002b8:	4b13      	ldr	r3, [pc, #76]	; (8000308 <gpio_ini+0x134>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	4b12      	ldr	r3, [pc, #72]	; (8000308 <gpio_ini+0x134>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f442 42a0 	orr.w	r2, r2, #20480	; 0x5000
 80002c6:	601a      	str	r2, [r3, #0]
	 *pGpio_B_Altf_L|=(5<<16);
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <gpio_ini+0x134>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <gpio_ini+0x134>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 80002d6:	601a      	str	r2, [r3, #0]
	 *pGpio_B_Altf_L|=(5<<20);
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <gpio_ini+0x134>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <gpio_ini+0x134>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80002e6:	601a      	str	r2, [r3, #0]
	 //pin 6 as output and 0
	 //*pGpio_B_Out&=~(1<<6);
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000000 	.word	0x20000000
 80002f8:	20000008 	.word	0x20000008
 80002fc:	20000004 	.word	0x20000004
 8000300:	20000010 	.word	0x20000010
 8000304:	20000014 	.word	0x20000014
 8000308:	2000000c 	.word	0x2000000c

0800030c <gpio_out>:

void gpio_out(int updown)
//choose high or low
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	if(updown)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d008      	beq.n	800032c <gpio_out+0x20>
	{
		*pGpio_B_Out|=(1<<6);
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <gpio_out+0x3c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <gpio_out+0x3c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		*pGpio_B_Out&=~(1<<6);
	}
}
 800032a:	e007      	b.n	800033c <gpio_out+0x30>
		*pGpio_B_Out&=~(1<<6);
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <gpio_out+0x3c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <gpio_out+0x3c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	20000018 	.word	0x20000018

0800034c <Spi_transmit>:
	//

}
void Spi_transmit()
//send data to slave
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
	//wait that txe bit is set and send 1 bit each bit
		while(!((*Spi_Sr)&(1<<1))){}
 8000352:	bf00      	nop
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <Spi_transmit+0x5c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f003 0302 	and.w	r3, r3, #2
 800035e:	2b00      	cmp	r3, #0
 8000360:	d0f8      	beq.n	8000354 <Spi_transmit+0x8>
		*Spi_Dr =1;
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <Spi_transmit+0x60>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2201      	movs	r2, #1
 8000368:	601a      	str	r2, [r3, #0]
	// wait for TXE bit to set
	while (!((*Spi_Sr)&(1<<1))) {};
 800036a:	bf00      	nop
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <Spi_transmit+0x5c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f003 0302 	and.w	r3, r3, #2
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0f8      	beq.n	800036c <Spi_transmit+0x20>
	// wait for BSY bit to Reset that indicates spi is free
	while (((*Spi_Sr)&(1<<7))) {};
 800037a:	bf00      	nop
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <Spi_transmit+0x5c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000386:	2b00      	cmp	r3, #0
 8000388:	d1f8      	bne.n	800037c <Spi_transmit+0x30>

	//  Clear the Overrun flag by reading DR and SR
	uint8_t temp = *Spi_Dr;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <Spi_transmit+0x60>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	71fb      	strb	r3, [r7, #7]
	temp = *Spi_Sr;
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <Spi_transmit+0x5c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	71fb      	strb	r3, [r7, #7]


}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	2000001c 	.word	0x2000001c
 80003ac:	20000020 	.word	0x20000020

080003b0 <Spi_recieve>:
void Spi_recieve()
//gets from slave data and recieve after sending 1 dummy byte
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
	uint8_t temp =0 ;
 80003b6:	2300      	movs	r3, #0
 80003b8:	71fb      	strb	r3, [r7, #7]
		//wait for busy key to reset
		while(((*Spi_Sr)&(1<<7))){};
 80003ba:	bf00      	nop
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <Spi_recieve+0x48>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1f8      	bne.n	80003bc <Spi_recieve+0xc>
		//send dummy data
		*Spi_Dr =1;
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <Spi_recieve+0x4c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2201      	movs	r2, #1
 80003d0:	601a      	str	r2, [r3, #0]
		//rxne is set and recieve sends data
		while(!((*Spi_Sr)&(1<<0))){};
 80003d2:	bf00      	nop
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <Spi_recieve+0x48>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0f8      	beq.n	80003d4 <Spi_recieve+0x24>
		temp=*Spi_Dr ;
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <Spi_recieve+0x4c>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	71fb      	strb	r3, [r7, #7]


}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	2000001c 	.word	0x2000001c
 80003fc:	20000020 	.word	0x20000020

08000400 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	gpio_ini();
 8000404:	f7ff fee6 	bl	80001d4 <gpio_ini>
	gpio_out(0);
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff ff7f 	bl	800030c <gpio_out>
	Spi_transmit();
 800040e:	f7ff ff9d 	bl	800034c <Spi_transmit>
	gpio_out(1);
 8000412:	2001      	movs	r0, #1
 8000414:	f7ff ff7a 	bl	800030c <gpio_out>

	gpio_out(0);
 8000418:	2000      	movs	r0, #0
 800041a:	f7ff ff77 	bl	800030c <gpio_out>
	Spi_transmit();
 800041e:	f7ff ff95 	bl	800034c <Spi_transmit>
	Spi_recieve();
 8000422:	f7ff ffc5 	bl	80003b0 <Spi_recieve>
	gpio_out(1);
 8000426:	2001      	movs	r0, #1
 8000428:	f7ff ff70 	bl	800030c <gpio_out>
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000436:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000438:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800043c:	480c      	ldr	r0, [pc, #48]	; (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043e:	490d      	ldr	r1, [pc, #52]	; (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <LoopForever+0xe>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000454:	4c0a      	ldr	r4, [pc, #40]	; (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000462:	f000 f811 	bl	8000488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000466:	f7ff ffcb 	bl	8000400 <main>

0800046a <LoopForever>:

LoopForever:
  b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   r0, =_estack
 800046c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000478:	080004f0 	.word	0x080004f0
  ldr r2, =_sbss
 800047c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000480:	20000040 	.word	0x20000040

08000484 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC_IRQHandler>
	...

08000488 <__libc_init_array>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	4d0d      	ldr	r5, [pc, #52]	; (80004c0 <__libc_init_array+0x38>)
 800048c:	4c0d      	ldr	r4, [pc, #52]	; (80004c4 <__libc_init_array+0x3c>)
 800048e:	1b64      	subs	r4, r4, r5
 8000490:	10a4      	asrs	r4, r4, #2
 8000492:	2600      	movs	r6, #0
 8000494:	42a6      	cmp	r6, r4
 8000496:	d109      	bne.n	80004ac <__libc_init_array+0x24>
 8000498:	4d0b      	ldr	r5, [pc, #44]	; (80004c8 <__libc_init_array+0x40>)
 800049a:	4c0c      	ldr	r4, [pc, #48]	; (80004cc <__libc_init_array+0x44>)
 800049c:	f000 f818 	bl	80004d0 <_init>
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	10a4      	asrs	r4, r4, #2
 80004a4:	2600      	movs	r6, #0
 80004a6:	42a6      	cmp	r6, r4
 80004a8:	d105      	bne.n	80004b6 <__libc_init_array+0x2e>
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b0:	4798      	blx	r3
 80004b2:	3601      	adds	r6, #1
 80004b4:	e7ee      	b.n	8000494 <__libc_init_array+0xc>
 80004b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ba:	4798      	blx	r3
 80004bc:	3601      	adds	r6, #1
 80004be:	e7f2      	b.n	80004a6 <__libc_init_array+0x1e>
 80004c0:	080004e8 	.word	0x080004e8
 80004c4:	080004e8 	.word	0x080004e8
 80004c8:	080004e8 	.word	0x080004e8
 80004cc:	080004ec 	.word	0x080004ec

080004d0 <_init>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	bf00      	nop
 80004d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d6:	bc08      	pop	{r3}
 80004d8:	469e      	mov	lr, r3
 80004da:	4770      	bx	lr

080004dc <_fini>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	bf00      	nop
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr
